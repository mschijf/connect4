<!DOCTYPE html>
<html lang="en-us">
    <style>
        .grid-container {
            display: grid;
            grid-template-columns: 620px auto;
            background-color: #2196F3;
            padding: 10px;
        }
        .grid-item {
            background-color: rgba(255, 255, 255, 0.8);
            border: 1px solid #2196F3;
            padding: 20px;
            text-align: center;
        }
        .square {
            display: flex;
            justify-content: center;
            align-items: center;
            width: 80px;
            height: 80px;
            font-size: 14px;
        }
        .dot {
            height: 80px;
            width: 80px;
            background-color: white;
            color: black;
            border-radius: 50%;
            font-size: 40px;
            display: inline-block;
            cursor: pointer
        }

        .smalldot {
            height: 50px;
            width: 50px;
            border-radius: 50%;
            display: inline-block;
        }

        .tableborder {
            border-collapse: collapse;
            border: 1px solid black;
            background-color: blue;
        }

        .tableleft {
            text-align: left;    .
        }

    </style>

    <body onload="getBoard()">
        <div class="grid-container">
            <div class="grid-item">
                <table class="tableborder">
                    {{#each fields}}
                    <tr>
                        {{#each this}}
                        <td><div id="field{{this.col}}{{this.row}}" class="dot" onclick="executeMove({{this.col}})"></div></td>
                        {{/each}}
                    </tr>
                    {{/each}}
                </table>
            </div>
            <div class="grid-item">
            </div>
            <div class="grid-item">
                <table>
                    <tr>
                        <td>Aan zet</td>
                        <td>Winnaar</td>
                    </tr>
                    <tr>
                        <td><div class="square"><div id="whoistomove" class="smalldot"></div></div></td>
                        <td><div class="square"><div id="winner" class="smalldot"></div></div></td>
                        <td><div class="square"><button id="buttonNew" onclick="newGame()">New game</button></div>
                        <td><div class="square"><button id="buttonCompute" onclick="computeMove()">Compute</button></div>
                        <td><div class="square"><button id="buttonTakeback" onclick="takebackLastMove()">Take Back</button></div>
                        <td><div class="square"><input checked type="checkbox" id="useComputerPlayer" name="useComp" value="useComp"><label for="useComp"> Play vs Computer</label></div>
                        <td><div class="square"></div>
                    </tr>
                </table>
            </div>
            <div class="grid-item">
                <table class="table2">
                    <tr>
                        <td class="tableleft"><b>Evaluation value:</b></td>
                        <td class="tableleft" id="evaluationValue"></td>
                    </tr>
                    <tr>
                        <td class="tableleft"><b>Computer Move:</b></td>
                        <td class="tableleft" id="computerMove"></td>
                    </tr>
                </table>
            </div>
        </div>

        <script>
            function toFieldId(col, row) {
                return "field" + col + "" + ({{numberOfRows}}-row-1)
            }
            function toColumnButtonId(col) {
                return "colbutton" + col
            }

            function toColor(modelColor) {
                if (modelColor === "White") {
                    return "yellow"
                } else if (modelColor === "Black") {
                    return "red"
                } else {
                    return "white"
                }
            }

            function toWinnerColor(modelColor) {
                if (modelColor === "White") {
                    return "lightgoldenrodyellow"
                } else if (modelColor === "Black") {
                    return "gold"
                } else {
                    return "white"
                }
            }

            function showBoard(board) {
                showFields(board)
                showLastFieldPlayed(board)
                showWhoIsToMove(board)
                showWinner(board)
                showActionButtons(board)
                showComputerResult(board.searchResult)
            }

            function showFields(board) {
                for (let row = 0; row < board.fields.length; row++) {
                    for (let col = 0; col < board.fields[row].length; col++) {
                        var elem = document.getElementById(toFieldId(col, row));
                        elem.style.backgroundColor = toColor(board.fields[row][col].color);
                        elem.innerText=""
                        if (board.fields[row][col].playable) {
                            elem.style.cursor = "pointer"
                            elem.style.pointerEvents = 'auto';
                        } else {
                            elem.style.cursor = "default"
                            elem.style.pointerEvents = 'none';
                        }
                    }
                }
            }

            function showLastFieldPlayed(board) {
                if (board.lastFieldPlayed != null) {
                    var elem = document.getElementById(toFieldId(board.lastFieldPlayed.col, board.lastFieldPlayed.row));
                    elem.innerText = "*"
                }
            }

            function disableAllButtons() {
                document.getElementById("buttonCompute").disabled = true
                document.getElementById("buttonTakeback").disabled = true
            }

            function showWhoIsToMove(board) {
                var elem = document.getElementById("whoistomove");
                elem.style.backgroundColor = toColor(board.colorToMove);
            }

            function showActionButtons(board) {
                document.getElementById("buttonCompute").disabled = board.gameFinished
                document.getElementById("buttonTakeback").disabled = !board.takeBackPossible
            }

            function showWinner(board) {
                var elem = document.getElementById("winner");
                if (board.gameFinished) {
                    elem.style.backgroundColor = toColor(board.colorHasWon);
                    for (let i = 0; i < board.winningFields.length; i++) {
                        var fieldElem = document.getElementById(toFieldId(board.winningFields[i].col, board.winningFields[i].row));
                        fieldElem.style.backgroundColor = toWinnerColor(board.colorHasWon);
                    }
                } else {
                    elem.style.backgroundColor = "white";
                }
            }

            function showComputerResult(searchResult) {
                if (searchResult != null) {
                    document.getElementById("computerMove").innerText = searchResult.column
                    document.getElementById("evaluationValue").innerText = searchResult.evaluationValue
                } else {
                    document.getElementById("computerMove").innerText = ""
                    document.getElementById("evaluationValue").innerText = ""
                }
            }
        </script>


        <script>
            function executeMove(columnNumber) {
                var request = new XMLHttpRequest();
                request.open("POST", "/move/" + columnNumber);
                request.onreadystatechange = function() {
                    if(this.readyState === 4 && this.status === 200) {
                        var board = JSON.parse(this.responseText);
                        showBoard(board);
                        var useComputer = document.getElementById("useComputerPlayer").checked
                        if (!board.gameFinished && useComputer) {
                            computeMove()
                        }
                    }
                };
                request.send();
            }

            function takebackLastMove() {
                var request = new XMLHttpRequest();
                request.open("POST", "/move/takeback/");
                request.onreadystatechange = function() {
                    if(this.readyState === 4 && this.status === 200) {
                        var board = JSON.parse(this.responseText);
                        showBoard(board);
                    }
                };
                request.send();
            }

            function computeMove() {
                disableAllButtons()
                var request = new XMLHttpRequest();
                request.open("POST", "/move/compute/");
                request.onreadystatechange = function() {
                    if(this.readyState === 4 && this.status === 200) {
                        var board = JSON.parse(this.responseText);
                        showBoard(board);
                    }
                };
                request.send();
            }

            function getBoard() {
                var request = new XMLHttpRequest();
                request.open("GET", "/board/");
                request.onreadystatechange = function() {
                    if(this.readyState === 4 && this.status === 200) {
                        var board = JSON.parse(this.responseText);
                        showBoard(board);
                    }
                };
                request.send();
            }

            function newGame() {
                var request = new XMLHttpRequest();
                request.open("POST",    "/board/");
                request.onreadystatechange = function() {
                    if(this.readyState === 4 && this.status === 200) {
                        var board = JSON.parse(this.responseText);
                        showBoard(board);
                    }
                };
                request.send();
            }
        </script>


    </body>
</html>
